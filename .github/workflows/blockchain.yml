# Blockchain Contracts CI/CD Pipeline
name: Blockchain Contracts CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint Blockchain Contracts
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Install dependencies
      run: npm install
    - name: Lint with ESLint
      run: npm run lint

  test:
    name: Test Blockchain Contracts
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 15
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-
    - name: Install dependencies
      run: npm install
    - name: Test with Mocha
      run: npm test

  build:
    name: Build Blockchain Contracts
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Install dependencies
      run: npm install
    - name: Build project
      run: npm run build
    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: blockchain-build
        path: build/

  deploy-staging:
    name: Deploy Blockchain Contracts to Staging
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15
    environment: staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: blockchain-build
        path: build/
    - name: Deploy to staging
      run: |
        echo "Deploying blockchain contracts to staging environment"
        # Add your staging deployment commands here

  deploy-production:
    name: Deploy Blockchain Contracts to Production
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15
    environment: production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: blockchain-build
        path: build/
    - name: Deploy to production
      run: |
        echo "Deploying blockchain contracts to production environment"
        # Add your production deployment commands here